//dug v3.1 - detect PIR sensor High, play random WAV. repeat to infinity. and beyond.
//found at http://forum.arduino.cc/index.php?topic=43329.0 by user Goat Boy



#include <FatReader.h>
#include <SdReader.h>
#include "WaveUtil.h"
#include "WaveHC.h"
#include "TrueRandom.h"

SdReader card;    // This object holds the information for the card
FatVolume vol;    // This holds the information for the partition on the card
FatReader root;   // This holds the information for the filesystem on the card
FatReader f;      // This holds the information for the file we're play

WaveHC wave;      // This is the only wave (audio) object, since we will only play one at a time

    int calibrationTime = 30;         //the time we give the sensor to calibrate itself (10-60 secs according to the datasheet)
    int filenum;
    int lastRand = -1;              // Keep track of the last random number, to avoid duplicates
    int ledPin1 = 13;               //Red, always on
    int ledPin2 = 12;               //Green, on when PIR triggered
    int GroundPin= A0;
    int pirPin= A2;               // choose the input pin (for PIR sensor)
    int pirState = LOW;             // we start, assuming no motion detected
    int wavMax = 3;                //max # of wav files on the card
    long randNumber;
    String filename ;
    String randString;
    String wavString;


// this handy function will return the number of bytes currently free in RAM, great for debugging!   
int freeRam(void)
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
  }
  return free_memory;
}

void sdErrorCheck(void)
{
  if (!card.errorCode()) return;
  putstring("\n\rSD I/O error: ");
  Serial.print(card.errorCode(), HEX);
  putstring(", ");
  Serial.println(card.errorData(), HEX);
  while(1);
}

void setup() {
  byte i;
 
  // set up serial port
  Serial.begin(9600);
  // pinMode(pirPin, INPUT);
            pinMode(ledPin1, OUTPUT);
            pinMode(ledPin2, OUTPUT);
            digitalWrite(GroundPin, LOW);
 
  putstring("Free RAM: ");       // This can help with debugging, running out of RAM is bad
  Serial.println(freeRam());      // if this is under 150 bytes it may spell trouble!
 
  // Set the output pins for the DAC control. This pins are defined in the library
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);

  //  if (!card.init(true)) { //play with 4 MHz spi if 8MHz isn't working for you
  if (!card.init()) {         //play with 8 MHz spi (default faster!) 
    putstring_nl("Card init. failed!");  // Something went wrong, lets print out why
    sdErrorCheck();
    while(1);                            // then 'halt' - do nothing!
  }
 
  // enable optimize read - some cards may timeout. Disable if you're having problems
  card.partialBlockRead(true);

// Now we will look for a FAT partition!
  uint8_t part;
  for (part = 0; part < 5; part++) {     // we have up to 5 slots to look in
    if (vol.init(card, part))
      break;                             // we found one, lets bail
  }
  if (part == 5) {                       // if we ended up not finding one  :(
    putstring_nl("No valid FAT partition!");
    sdErrorCheck();      // Something went wrong, lets print out why
    while(1);                            // then 'halt' - do nothing!
  }
 
  // Lets tell the user about what we found
  putstring("Using partition ");
  Serial.print(part, DEC);
  putstring(", type is FAT");
  Serial.println(vol.fatType(),DEC);     // FAT16 or FAT32?
 
  // Try to open the root directory
  if (!root.openRoot(vol)) {
    putstring_nl("Can't open root dir!"); // Something went wrong,
    while(1);                             // then 'halt' - do nothing!
  }
 
  // Whew! We got past the tough parts.
  putstring_nl("Ready!");
 
    //give the sensor some time to calibrate
      Serial.print("calibrating sensor ");
      delay(1000);
        for(int i = 0; i < calibrationTime; i++){
            Serial.print(".");
            delay(1000);
            }
        Serial.println(" done");
        Serial.println("SENSOR ACTIVE");
        digitalWrite(ledPin1, HIGH);
        delay(50);
     
}




void loop() {
  byte i;
  
digitalWrite(ledPin1, HIGH);

if(digitalRead(pirPin) == HIGH){
                digitalWrite(ledPin2, HIGH);
           
               Serial.print("motion detected at ");
               Serial.print(millis()/1000);
               Serial.println(" sec");
               randNumber = (TrueRandom.random(1,wavMax));
               while(randNumber == lastRand) { //prevent 2 identical #'s
                 randNumber = (TrueRandom.random(0,wavMax));
               }
               lastRand = randNumber;
               Serial.println(randNumber);

           switch (randNumber) {
              
   case 0:    
      playcomplete("0.WAV");
      break;            
   case 1:     
      playcomplete("1.WAV");
      break;

   case 2:     
      playcomplete("2.WAV");
      break;

   
  }
           
           
           digitalWrite(ledPin2, LOW);
           pirState = LOW;
           delay(5000);
           Serial.println("Ready");
}

}

// Plays a full file from beginning to end with no pause.
void playcomplete(char *name) {
  // call our helper to find and play this name
  playfile(name);
  while (wave.isplaying) {
  // do nothing while its playing
  }
  // now its done playing
}

void playfile(char *name) {
  // see if the wave object is currently doing something
  if (wave.isplaying) {// already playing something, so stop it!
    wave.stop(); // stop it
  }
  // look in the root directory and open the file
  if (!f.open(root, name)) {
    putstring("Couldn't open file "); Serial.print(name); return;
  }
  // OK read the file and turn it into a wave object
  if (!wave.create(f)) {
    putstring_nl("Not a valid WAV"); return;
  }
 
  // ok time to play! start playback
  wave.play();
}
